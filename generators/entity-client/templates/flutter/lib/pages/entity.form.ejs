<%_
  const dartFields = {};
  const index = {};
  let hasUserRelationship = false;
  const id = {};
  var i=0;

  id['type'] = 'int';
  id['name'] = 'id';
  id['i']=i;
  dartFields['id'] = id;

  fields.forEach(field => {
      i++;
      const varValue = {};
      const fieldType = field.fieldType;
      const fieldName = field.fieldName;
      let dartType;
      let dartCont;
      let desc;
      if (field.fieldIsEnum) {
          dartType = 'enum';
      } else if ( fieldType === 'UUID' || fieldType === 'String') {
          dartType = 'String';
      } else if ( fieldType === 'Instant') {
          dartType = 'DartTime';
          desc = '.toIso8601String()' + 'Z';
      } else {
          dartType = fieldType ;
      } 

      dartCont = 'TextEditingController()';

      varValue['type'] = dartType;
      varValue['name'] = fieldName;
      varValue['desc'] = desc;
      varValue['cont'] = dartCont;
      varValue['i']=i;
      
      dartFields[fieldName] = varValue;
  });

  relationships.forEach(relationship => {
    let fieldType;
    let fieldName;
    const relationshipType = relationship.relationshipType;
    if (relationshipType === 'one-to-many' || relationshipType === 'many-to-many') {
        if (relationship.otherentityClass === 'User') {
            fieldType = 'User[]';
            hasUserRelationship = true;
        } else {
            fieldType = 'BaseEntity[]';
        }
        fieldName = relationship.relationshipFieldNamePlural;
    } else {
        if (dto === 'no') {
            if (relationship.otherentityClass === 'User') {
                fieldType = 'User';
                hasUserRelationship = true;
            } else {
                fieldType = 'BaseEntity';
            }
            fieldName = relationship.relationshipFieldName;
        } else {
            fieldType = dartKeyType;
            fieldName = `${relationship.relationshipFieldName}Id`;
        }
    }
    
  });
_%>

<%#
"relationships": [
        {
            "relationshipType": "one-to-one",
            "relationshipName": "license",
            "otherEntityName": "license",
            "otherEntityField": "id",
            "ownerSide": true,
            "otherEntityRelationshipName": "driver"
        },
  ]
   "changelogDate": "20180702074513",
    "entityTableName": "driver",
    "dto": "no",
    "pagination": "no",
    "service": "serviceImpl",
    "jpaMetamodelFiltering": false,
    "fluentMethods": true,
    "clientRootFolder": "",
    "applications": "*"
--%>


import 'package:flutter/material.dart';
import '<%= entityInstance %>.helper.dart';
import '<%= entityInstance %>.dart';
import '../../services/services.dart'; <% relationships.forEach(rela => { if(rela.relationshipType == 'many-to-one' || rela.relationshipType == 'many-to-many'){%>
import '../<%= rela.otherEntityName %>/<%= rela.otherEntityName %>.dart';
import '../<%= rela.otherEntityName %>/<%= rela.otherEntityName %>.helper.dart';
<%}}%>

class <%= entityClass %>FormPage extends StatefulWidget {
  final <%= entityClass %> data;
  <%= entityClass %>FormPage({this.data});
  @override
  _<%= entityClass %>FormPageState createState() => _<%= entityClass %>FormPageState();
}

class _<%= entityClass %>FormPageState extends State<<%= entityClass %>FormPage> {
  bool isEdited = false;<% for (idx in dartFields) { %><% if(idx=='id') {%>
  final _id = TextEditingController(); <%} else if (dartFields[idx]['type'] == 'enum' ) {%>
  var _<%= dartFields[idx]['name'] %> = ''; <%} else {%>
  final _<%= dartFields[idx]['name'] %> = <%= dartFields[idx]['cont'] %>;<%}%><%}%>

  @override
  Widget build(BuildContext context) {
    if (widget.data != null) {
      isEdited = true;
      <%= entityClass %> <%= entityInstance %> = widget.data;
      <% for (idx in dartFields) { if (idx == 'id') {%> _id.text = <%= entityInstance %>.id.toString(); <%} else if(dartFields[idx]['type'] == 'enum') { %>
      _<%= dartFields[idx]['name'] %> = <%= entityInstance %>.<%= dartFields[idx]['name'] %>; <%} else {%>
      _<%= dartFields[idx]['name'] %>.text = <%= entityInstance %>.<%= dartFields[idx]['name'] %><%if (dartFields[idx]['name'] != 'String' || dartFields[idx]['name'] != 'Boolean') {%>.toString()<%}%>;<%}}%>
    }

    return Scaffold(
        appBar: AppBar(
          title: Text('Create <%= entityClass %>'),
        ),
        body: SafeArea(
            child: ListView(
                padding: EdgeInsets.symmetric(horizontal: 24.0),
                children: _listChild())),
        floatingActionButton: FloatingActionButton(
          onPressed: _save,
          tooltip: 'Add',
          child: Icon(Icons.save),
        ));
  }

  _listChild() {
    return <Widget>[
      SizedBox(height: 120.0),<%  for (idx in dartFields) { if (idx == 'id' ){%> 
      TextField(
        controller: _id,
        decoration: InputDecoration(
          filled: true,
          labelText: 'ID',
        ),
        enabled: false
      ), <% } else if( dartFields[idx]['type'] != 'enum') { %>
      TextField(
        controller: _<%= dartFields[idx]['name']%>,
        decoration: InputDecoration(
          filled: true,
          labelText: '<%= dartFields[idx]['name']%>',
        ),
        <% if (dartFields[idx]['name'] != 'String' || dartFields[idx]['name'] != 'Boolean') { %>keyboardType: TextInputType.number,<%}%>
      ), <%} else { %>
      DropdownButton<String>(
              value: _<%= dartFields[idx]['name'] %>,
              onChanged: (String newValue) {
                setState(() {
                  _<%= dartFields[idx]['name'] %> = newValue;
                });
              },
              items: <%= dartFields[idx]['name'] %>.map<DropdownMenuItem<String>>((String value) {
                  return DropdownMenuItem<String>(
                    value: value,
                    child: Text(value),
                  );
                })
                .toList(),
      ),<%}}%><% relationships.forEach(rela => { if(rela.relationshipType == 'many-to-one'){%>
      DropdownButton<String>(
              value: _<%= rela.otherEntityName %>,
              onChanged: (String newValue) {
                setState(() {
                  _<%= rela.otherEntityName %> = newValue;
                });
              },
              items: <%= rela.otherEntityName %>List.map<DropdownMenuItem<String>>((String value) {
                  return DropdownMenuItem<String>(
                    value: value,
                    child: Text(value),
                  );
                })
                .toList(),
      ), <%}});%>
    ];
  }

  void _save() async {
    try {
      if (isEdited) {
        await update<%= entityClass %>(<%= entityClass %>(<% for (idx in dartFields) { if (idx == 'id') {%>
          id: int.parse(_id.text), <% } else if (dartFields[idx]['type'] == 'enum') { %>
          <%= dartFields[idx]['name'] %>: _<%= dartFields[idx]['name'] %>, <%} else { %>
          <%= dartFields[idx]['name'] %>: <% if (dartFields[idx]['name'] != 'String' || dartFields[idx]['name'] != 'Boolean') {%>int.parse(_<%= dartFields[idx]['name'] %>.text),<%} else {%>_<%= dartFields[idx]['name'] %>.text<%}  }}%>
        ));
        isEdited =false;  
      } else {
        await create<%= entityClass %>(<%= entityClass %>(<% for (idx in dartFields) { if (idx !== 'id' && dartFields[idx]['type'] == 'enum') { %>
          <%= dartFields[idx]['name'] %>: _<%= dartFields[idx]['name'] %>, <%} else { %>
          <%= dartFields[idx]['name'] %>: <% if (dartFields[idx]['name'] != 'String' || dartFields[idx]['name'] != 'Boolean') {%>int.parse(_<%= dartFields[idx]['name'] %>.text),<%} else {%>_<%= dartFields[idx]['name'] %>.text<%}  }}%>
        ));
      }
    } catch (e) {
      print(e.toString());
    }
    Navigator.pop(context);
  }

  void _clearForm() {<% for (idx in dartFields) { %><% if(idx!='id' && dartFields[idx]['type'] != 'enum') {%>
    _<%= dartFields[idx]['name'] %>.clear();<%}%><%}%>
  }
}
