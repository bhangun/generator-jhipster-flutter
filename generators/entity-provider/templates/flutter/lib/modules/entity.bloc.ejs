<%_
  const dartFields = {};
  const index = {};
  let hasUserRelationship = false;
  const id = {};
  var i=0;

  id['type'] = 'int';
  id['name'] = 'id';
  id['i']=i;
  dartFields['id'] = id;

  function capitalize(text){
    return text.substr( 0, 1 ).toUpperCase()+text.substr( 1 );
  }

  fields.forEach(field => {
      i++;
      const varValue = {};
      const fieldType = field.fieldType;
      const fieldName = field.fieldName;
      let dartType;
      let dartCont;
      let desc;
      if (field.fieldIsEnum) {
          dartType = 'enum';
      } else if ( fieldType === 'UUID' || fieldType === 'String') {
          dartType = 'String';
      } else if ( fieldType === 'Integer') {
        dartType = 'int';
      } else if ( fieldType === 'Instant') {
          dartType = 'DartTime';
          desc = '.toIso8601String()' + 'Z';
      } else {
          dartType = fieldType ;
      } 

      dartCont = 'TextEditingController()';

      varValue['type'] = dartType;
      varValue['name'] = fieldName;
      varValue['desc'] = desc;
      varValue['cont'] = dartCont;
      varValue['i']=i;
      
      dartFields[fieldName] = varValue;
  });

  relationships.forEach(rela => { 
    if(rela.relationshipType == 'many-to-one' || rela.relationshipType == 'one-to-one' && rela.ownerSide == true
    || rela.relationshipType == 'many-to-many'  && rela.ownerSide == true ){
        
        const varValue = {};
        varValue['type'] = capitalize(rela.otherEntityName);
        varValue['name'] = rela.otherEntityName+'s';
        varValue['desc'] = 'relationship';
        
        dartFields[rela.otherEntityName] = varValue;
    }
  });

_%>
import 'package:flutter/material.dart';
import 'package:<%= appsName %>/modules/<%= entityInstance %>/services/<%= entityInstance %>_services.dart';
import 'package:<%= appsName %>/modules/<%= entityInstance %>/models/<%= entityInstance %>.dart';
import 'package:<%= appsName %>/services/locator.dart';
import 'package:<%= appsName %>/services/navigation.dart';
import 'package:<%= appsName %>/services/routes.dart';
import 'package:<%= appsName %>/services/helper.dart';<% for (idx in dartFields) { %><% if (dartFields[idx]['desc'] == 'relationship') {%>
import '../../<%= idx %>/models/<%= idx %>.dart'; <%}}%>

class <%= entityClass %>Bloc extends ChangeNotifier {

  bool isListEmpty = true;

  bool isItemEmpty = true;

  bool isUpdated = false;

  bool isDeleted = false;


  String errorMessage='error';

  bool showError = false;

  String title = '';


  int totalItem = 0;

  bool success = false;

  bool loading = false;

  int position = 0;


  <%= entityClass %> itemDetail;

  List<<%= entityClass %>> <%= entityInstance %>List;
  <% for (idx in dartFields) { if (dartFields[idx]['type'] == 'enum') {%>
    String <%- dartFields[idx]['name'] %>;<%} else {%>
    <%- dartFields[idx]['type'] %> <%- dartFields[idx]['name'] %>;<% }} %>


  // actions:-------------------------------------------------------------------

  String get formTitle => isUpdated? title='Update <%= entityClass %>':'Create <%= entityClass %>'; <% for (idx in dartFields) { %>
    void set<%- capitalize(dartFields[idx]['name'])%>(<% if(dartFields[idx]['type'] != 'enum') dartFields[idx]['type']  %> value) {
      <%- dartFields[idx]['name'] %> = value;
    }<% } %>

  itemTap(int _position) {
    try {
      position = _position;
      itemDetail = <%= entityInstance %>List[position];
      isItemEmpty = false;
      locator<NavigationServices>().navigateTo(Routes.<%= entityInstance %>Detail);

    } catch (e) {
      isItemEmpty = true;
    }
  }

  add() {
    itemDetail = null;
    isUpdated = false;
    locator<NavigationServices>().navigateTo(Routes.<%= entityInstance %>Form);
  }

  save() {
    loading = true;
    success = false;
    try {
      isUpdated ? locator<<%= entityClass %>Services>().update<%= entityClass %>(_to<%= entityClass %>())
          :locator<<%= entityClass %>Services>().create<%= entityClass %>(_to<%= entityClass %>());
      locator<NavigationServices>().navigateTo(Routes.<%= entityInstance %>List);
      loading = false;
      success = true;
      get<%= entityClass %>List();
    }catch(e){
      print(e.toString());
    }
  }

  delete(int id) {
    loading = true;
    success = false;
    try {
      locator<<%= entityClass %>Services>().delete<%= entityClass %>(id);
      isDeleted =true;
      loading = false;
      success = true;
      get<%= entityClass %>List();
    }catch(e){
      print(e.toString());
    }
  }

  update() {
    loading = true;
    success = false;
    try {
      locator<NavigationServices>().navigateTo(Routes.<%= entityInstance %>Form);
      isUpdated = true;
      loading = false;
      success = true;
      get<%= entityClass %>List();
    }catch(e){
      print(e.toString());
    }
  }

  Future get<%= entityClass %>List() async {
    loading = true;
    success = false;
    isListEmpty = true;
    try {
      locator<<%= entityClass %>Services>().<%= entityInstance %>s().then((data) => _set<%= entityClass %>List(data));
      isListEmpty = false;
      loading = false;
      success = true;
    } catch (e) {
      showError = true;
      errorMessage = 'Data Empty';
      print(e.toString());
    }

  }

  _set<%= entityClass %>List(List<<%= entityClass %>> data){
    if (data != null) {
      <%= entityInstance %>List = data;
      totalItem = data.length;
    }
  }

  <%= entityClass %> _to<%= entityClass %>() {
    return <%= entityClass %>(<% for (idx in dartFields) { if(idx=='id') {%>
    id: isUpdated ? itemDetail.id : '',<%} else {%>
    <%= dartFields[idx]['name'] %>: <%= dartFields[idx]['name'] %>, <% }} %>);
  }

  viewList() {
    get<%= entityClass %>List();
    locator<NavigationServices>().navigateTo(Routes.<%= entityInstance %>List);
  }
}
